# Mass Transit Billing System
### Overview
This is a billing system designed for a mass transit system that consists of a network of train stations, each belonging to a pricing zone. The system records user journeys with their user ID, direction (IN/OUT of the station), the station, and the time of entry/exit (in UTC) for a given period. The data is sorted by timestamp but not necessarily by users.

### Billing System
The billing system has the following cost structure for journeys:



The task is to build a billing system for a mass transit system. The transit system has a network of
train stations, each belonging to a pricing zone. Each time a user enters (IN) or exits (OUT) a
station it is recorded. The data you are provided with is the user_id, direction (either IN or OUT
of the station), the station and the time of the entry/exit (in UTC) for all the journeys in a given
time period. You can assume the data is sorted by timestamp, but not necessarily by users. You are
tasked with calculating the total charge for each customer at the end of the period.

There is a £2 base fee for all journeys, and additional costs based on the entry and exit zones.

| Zone | In / Out additional Cost |
| ---- | ------------------------ |
| 1    | £0.80                    |
| 2-3  | £0.50                    |
| 4-5  | £0.30                    |
| 6+   | £0.10                    |

e.g. zone 1 -> zone 1 = 2.00 + 0.80 + 0.80 = £3.60 zone 6 -> zone 4 = 2.00 + 0.10 + 0.30 = £2.40

For any erroneous journeys where an IN or OUT is missing a £5 fee is used as the total journey
price. It should be assumed that all valid journeys are completed before midnight (i.e. All valid
journeys will have an IN and an OUT on the same day).

There is also a daily cap of £15, and a monthly cap of £100. Caps include all journey costs and
fees, once a given cap is reached the customer pays no extra for the given day or month.

Expected Cmd to run:

```bash
<your_program> <zones_file_path> <journey_data_path> <output_file_path>
```

Expected Output: each user_id and their billing_amount written to <output_file_path> in user_id
alphanumeric increasing order(e.g. ['23Charlie', 'alpha', 'bravo']) as shown in the example output
file.

e.g. To run a python solution

```bash
python my_solution.py zone_map.csv journey_data.csv output.csv
```

or for a Go solution:

```bash
go run main.go zone_map.csv journey_data.csv output.csv
```
